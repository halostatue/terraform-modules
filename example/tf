#! /bin/bash

declare bn0 cmd
declare -a environments

bn0=$(basename "${0}")
environments=($(find . -name main.tf -depth 2 | awk -F/ '{ print $2; }'))

function error()
{
  echo "${*}"
  echo
} >&2

function abort()
{
  if (( ${#} )); then
    error "${@}"
    usage
  else
    error Error during execution.
  fi
  exit 1
}

function ok()
{
  exit 0
}

function missing()
{
  if (( ${#} )); then
    abort "${*}"
  else
    abort No command or environment name provided.
  fi
}

function usage()
{
  cat <<HELP
usage: ${bn0} new ENVIRONMENT
       ${bn0} update [ENVIRONMENT]+
       ${bn0} output [ENVIRONMENT]+
       ${bn0} ENVIRONMENT [options]

Run commands to help manage the Terraform environments in the infrastructure
contained in $(pwd).

Known environments:
HELP

  local env
  for env in "${environments[@]}"; do
    echo "  - ${env}"
  done
}

function configure_shared_tf()
{
  cd "${1}" || abort

  local l
  for l in ../shared/*.tf; do
    ln -sf "${l}"
  done

  if [ -f terraform.tfvars ]; then
    if ! diff -q terraform.tfvars ../shared/terraform.tfvars; then
      echo "Changes to terraform.tfvars:"
      echo
      diff -u terraform.tfvars ../shared/terraform.tfvars
    fi
  else
    cp ../shared/terraform.tfvars .
  fi

  cd .. || abort
}

function help-output()
{
  cat <<HELP
usage: ${bn0} output [ENVIRONMENT]+

Runs 'terraform output' for either the provided environments or all
environments.
HELP
}

function output()
{
  local env

  if (( ${#} )); then
    for env in "${@}"; do
      ./"${bn0}" "${env}" output
    done
  else
    for env in "${environments[@]}"; do
      ./"${bn0}" "${env}" output
    done
  fi
}

function help-update()
{
  cat <<HELP
usage: ${bn0} update [ENVIRONMENT]+

Updates shared configuration values for either the named environments or all
environments. Also runs 'terraforrm get -update' for each environment updated.
HELP
}

function update()
{
  local env

  if (( ${#} )); then
    for env in "${@}"; do
      [ -d "${env}" ] ||
        error "Environment '${env}' does not exist. Use 'new' to create an environment."

      echo "Updating environment '${env}'..."
      configure_shared_tf "${env}"

      ./"${bn0}" "${env}" get -update
    done
  else
    for env in "${environments[@]}"; do
      ./"${bn0}" update "${env}"
    done
  fi
}

function help-new()
{
  cat <<HELP
usage: ${bn0} new ENVIRONMENT

Create a new environment with the given name.
HELP
}

function new()
{
  (( ${#} )) || missing "No environment name provided for 'new'."

  local env
  env=${1}

  [ -d "${env}" ] &&
    abort "Environment '${env}' already exists. Use 'update' to update shared
environment configuration."

  mkdir -p "${env}"
  configure_shared_tf "${env}"

  echo "Add the following configuration to your terraformers environment."

  cat <<FOLDER
module "folder_${env}" {
  source = "github.com/halostatue/terraform-modules//aws/s3-tfstate-folder?ref=v2.0"

  aws-profile = "\${var.profile}"
  aws-region  = "\${var.region}"

  bucket = "\${module.tfstate_bucket.id}"
  user   = "\${aws_iam_user.terraformer.name}"
  folder = "${env}"
}

output "${env}-command" {
  value = "\${module.folder_dns.command}"
}

output "${env}-config" {
  value = "\${module.folder_dns.config}"
}
FOLDER
}

function help()
{
  if ! (( ${#} )); then
    usage
    exit 0
  fi

  case "${1}" in
    output|update|new)
      help-"${1}"
      ;;
    *)
      local envname
      envname="${1}"
      shift

      if [ -x "${envname}"/"${bn0}" ]; then
        exec "${envname}/${bn0}" help "${@}"
      elif [ -f "${envname}"/main.tf ]; then
        exec terraform -help
      fi
      ;;
  esac
}

function environment()
{
  local env target
  target="${1}"
  shift

  for env in "${environments[@]}"; do
    [[ "${env}" == "${target}" ]] || continue

    if [ -x "${target}"/"${bn0}" ]; then
      cd "${target}" || abort
      ./"${bn0}" "${@}"
      exit ${?}
    else
      cd "${target}" || abort

      local -a args

      if (( ${#} )); then
        case "${1}" in
          -*) args=(apply ${@}) ;;
          *) args=(${@}) ;;
        esac
      else
        args=(apply)
      fi

      exec terraform "${args[@]}"
    fi
  done

  abort "No environment '${target}' found."
}

(( ${#} )) || missing

cmd="${1}"
shift

case "${cmd}" in
  help|-help)
    help "${@}"
    ;;
  output|update|new)
    ${cmd} "${@}"
    ;;
  *)
    environment "${cmd}" "${@}"
    ;;
esac
